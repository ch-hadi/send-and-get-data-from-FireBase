{"ast":null,"code":"var _jsxFileName = \"G:\\\\udmy\\\\Api\\\\api\\\\send to firebase\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-http-send-get-default-rtdb.asia-southeast1.firebasedatabase.app.json/'); // if (!response.ok) {\n      //   throw new Error('Something went wrong!');\n      // }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (let k in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-send-get-default-rtdb.asia-southeast1.firebasedatabase.app/mov.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["G:/udmy/Api/api/send to firebase/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","data","json","loadedMovies","k","push","id","key","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://react-http-send-get-default-rtdb.asia-southeast1.firebasedatabase.app.json/');\n    \n    \n      // if (!response.ok) {\n      //   throw new Error('Something went wrong!');\n      // }\n\n      const data = await response.json();\n      const loadedMovies = [];\n      for (let k in data){\n        loadedMovies.push (\n          {\n            id:key , \n            title :data[key].title, \n            openingText:data[key].openingText,\n            releaseDate: data[key].releaseDate\n          }\n        )\n      }\n\n    \n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-send-get-default-rtdb.asia-southeast1.firebasedatabase.app/mov.json' , {\n       \n      method: 'POST',\n      body :JSON.stringify(movie),\n      headers : {'Content-Type' : 'application/json'}\n });\n const data=await response.json();\n  }\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}